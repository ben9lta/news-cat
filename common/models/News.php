<?php

namespace common\models;

use Yii;

/**
 * This is the model class for table "news".
 *
 * @property int $id
 * @property string|null $title
 * @property string|null $body
 *
 * @property RubricNews[] $rubricNews
 */
class News extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'news';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['body'], 'string'],
            [['title'], 'string', 'max' => 255],
        ];
    }

    public function fields()
    {
        return [
            'title' => function($model){ return $model->title;},
            'body' => function($model){ return $model->body;},
            'rubrics' => function($model){ return $model->rubricNews;},
        ];
    }

    public function extraFields()
    {
        return ['rubricNewsCount'];
//        return parent::extraFields(); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'body' => 'Body',
        ];
    }

    public function save($runValidation = true, $attributeNames = null)
    {
        /** @var self $rn */
        $transaction = self::getDb()->beginTransaction();
        try {
            $post = Yii::$app->request->post();

            if(Yii::$app->controller->action->id === 'update') {
                $this->update();
                $ids = RubricNews::find()->select('id, rubric_id')->where(['news_id' => $this->id])->asArray()->all();

                $_ids = [];
                foreach ($ids as $i => $id) {
                    $_ids[] = $id['rubric_id'];
                }

                $delete = array_values(array_diff($_ids, $post['Rubric']['rubric_id']));
                $insert = array_values(array_diff($post['Rubric']['rubric_id'], $_ids));

                if(!empty($delete)) {
                    $cond = 'id IN (';
                    foreach ($delete as $i => $id) {
                        $cond .= $ids[array_search($id, $_ids)]['id'] . ($i < count($delete) - 1 ? ',' : ')');
                    }
                    Yii::$app->db->createCommand()->delete(RubricNews::tableName(), $cond)->execute();
                }

                if(!empty($insert))
                {
                    foreach ($insert as $id) {
                        $values = ['id' => '', 'rubric_id' => $id, 'news_id' => $this->id];
                        Yii::$app->db->createCommand()->insert(RubricNews::tableName(), $values)->execute();
                    }
                }
                $transaction->commit();

            } else if($this->save()) {
                $values = [];

                foreach ($post['Rubric']['rubric_id'] as $id)
                    $values[] = ['', $id, $this->id];

                Yii::$app->db->createCommand()->batchInsert(RubricNews::tableName(), RubricNews::attributes(), $values)->execute();
                $transaction->commit();
            }
            return true;

        }catch(\Throwable $e) {
            $transaction->rollBack();
            throw $e;
        }
//        return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }

    /**
     * Gets query for [[RubricNews]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getRubricNews()
    {
        return $this->hasMany(RubricNews::className(), ['news_id' => 'id']);
    }

    public function getRubricNewsCount()
    {
        return $this->hasMany(RubricNews::className(), ['news_id' => 'id'])->count();
    }

    public function getRn()
    {
        return $this->hasOne(RubricNews::class, ['news_id' => 'id']);
    }
}
